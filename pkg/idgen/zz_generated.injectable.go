/*
Package idgen GENERATED BY gengo:injectable
DON'T EDIT THIS FILE
*/
package idgen

import (
	context "context"
	fmt "fmt"
)

type contextGen struct{}

func GenFromContext(ctx context.Context) (Gen, bool) {
	if v, ok := ctx.Value(contextGen{}).(Gen); ok {
		return v, true
	}
	return nil, false
}

func GenInjectContext(ctx context.Context, tpe Gen) context.Context {
	return context.WithValue(ctx, contextGen{}, tpe)
}

func (p *IDGen) InjectContext(ctx context.Context) context.Context {
	ctx = GenInjectContext(ctx, p.gen)

	return ctx
}

func (v *IDGen) Init(ctx context.Context) error {
	if err := v.afterInit(ctx); err != nil {
		return err
	}

	return nil
}

func (v *Typed[ID]) Init(ctx context.Context) error {
	if value, ok := GenFromContext(ctx); ok {
		v.g = value
	} else {
		return fmt.Errorf("missing provider %T.g", v)
	}

	return nil
}
