/*
Package v1 GENERATED BY gengo:objectkind 
DON'T EDIT THIS FILE
*/
package v1

import (
	object "github.com/octohelm/objectkind/pkg/object"
	pkgruntime "github.com/octohelm/objectkind/pkg/runtime"
)

func (Order) GetKind() string {
	return "Order"
}

func (Order) GetPluralizedKind() string {
	return "Orders"
}

func (Order) GetAPIVersion() string {
	return SchemeGroupVersion.String()
}

func (OrderItem) GetKind() string {
	return "OrderItem"
}

func (OrderItem) GetPluralizedKind() string {
	return "OrderItems"
}

func (OrderItem) GetAPIVersion() string {
	return SchemeGroupVersion.String()
}

func (OrderItemRequestForCreate) GetKind() string {
	return "OrderItem"
}

func (OrderItemRequestForCreate) GetPluralizedKind() string {
	return "OrderItems"
}

func (OrderItemRequestForCreate) GetAPIVersion() string {
	return SchemeGroupVersion.String()
}

func (src *OrderItem) AsOrderItemRequestForCreate() *OrderItemRequestForCreate {
	dst := pkgruntime.New[OrderItemRequestForCreate]()
	pkgruntime.CopyObject(dst, src)
	copySpec := func(d *OrderItemSpecRequestForCreate, s *OrderItemSpec) {
		if s.Sku != nil {
			copySku := func(d *SkuReference, s *Sku) {
				pkgruntime.CopyCodableObject(d, s)
			}
			copySku(&d.Sku, s.Sku)

		}
		d.Quantity = s.Quantity
	}
	copySpec(&dst.Spec, &src.Spec)

	return dst
}

func (src *OrderItemRequestForCreate) AsOrderItem() *OrderItem {
	dst := pkgruntime.New[OrderItem]()
	pkgruntime.Copy(dst, src)
	copySpec := func(d *OrderItemSpec, s *OrderItemSpecRequestForCreate) {
		copySku := func(d *Sku, s *SkuReference) {
			pkgruntime.CopyObject(d, s)
		}
		if d.Sku == nil {
			d.Sku = new(Sku)
		}
		copySku(d.Sku, &s.Sku)
		d.Quantity = s.Quantity
	}
	copySpec(&dst.Spec, &src.Spec)

	return dst
}

func (OrderRequestForCreate) GetKind() string {
	return "Order"
}

func (OrderRequestForCreate) GetPluralizedKind() string {
	return "Orders"
}

func (OrderRequestForCreate) GetAPIVersion() string {
	return SchemeGroupVersion.String()
}

func (src *Order) AsOrderRequestForCreate() *OrderRequestForCreate {
	dst := pkgruntime.New[OrderRequestForCreate]()
	pkgruntime.CopyObject(dst, src)
	copySpec := func(d *OrderSpecRequestForCreate, s *OrderSpec) {
		d.Items = make([]*OrderItemRequestForCreate, len(s.Items))
		for i, x := range s.Items {
			d.Items[i] = x.AsOrderItemRequestForCreate()
		}
	}
	copySpec(&dst.Spec, &src.Spec)

	return dst
}

func (src *OrderRequestForCreate) AsOrder() *Order {
	dst := pkgruntime.New[Order]()
	pkgruntime.Copy(dst, src)
	copySpec := func(d *OrderSpec, s *OrderSpecRequestForCreate) {
		d.Items = make([]*OrderItem, len(s.Items))
		for i, x := range s.Items {
			d.Items[i] = x.AsOrderItem()
		}
	}
	copySpec(&dst.Spec, &src.Spec)

	return dst
}

func (Product) GetKind() string {
	return "Product"
}

func (Product) GetPluralizedKind() string {
	return "Products"
}

func (Product) GetAPIVersion() string {
	return SchemeGroupVersion.String()
}

func (ProductReference) GetKind() string {
	return "Product"
}

func (ProductReference) GetPluralizedKind() string {
	return "Products"
}

func (ProductReference) GetAPIVersion() string {
	return SchemeGroupVersion.String()
}

func (src *Product) AsProductReference() *ProductReference {
	dst := pkgruntime.New[ProductReference]()
	pkgruntime.CopyObject(dst, src)

	return dst
}

func (src *ProductReference) AsProduct() *Product {
	dst := pkgruntime.New[Product]()
	pkgruntime.CopyObject(dst, src)

	return dst
}

func (ProductRequestForCreate) GetKind() string {
	return "Product"
}

func (ProductRequestForCreate) GetPluralizedKind() string {
	return "Products"
}

func (ProductRequestForCreate) GetAPIVersion() string {
	return SchemeGroupVersion.String()
}

func (src *Product) AsProductRequestForCreate() *ProductRequestForCreate {
	dst := pkgruntime.New[ProductRequestForCreate]()
	pkgruntime.CopyObject(dst, src)

	return dst
}

func (src *ProductRequestForCreate) AsProduct() *Product {
	dst := pkgruntime.New[Product]()
	pkgruntime.Copy(dst, src)

	return dst
}

func (ProductRequestForUpdate) GetKind() string {
	return "Product"
}

func (ProductRequestForUpdate) GetPluralizedKind() string {
	return "Products"
}

func (ProductRequestForUpdate) GetAPIVersion() string {
	return SchemeGroupVersion.String()
}

func (src *Product) AsProductRequestForUpdate() *ProductRequestForUpdate {
	dst := pkgruntime.New[ProductRequestForUpdate]()
	pkgruntime.CopyObject(dst, src)

	return dst
}

func (src *ProductRequestForUpdate) AsProduct() *Product {
	dst := pkgruntime.New[Product]()
	pkgruntime.Copy(dst, src)

	return dst
}

func (Sku) GetKind() string {
	return "Sku"
}

func (Sku) GetPluralizedKind() string {
	return "Skus"
}

func (Sku) GetAPIVersion() string {
	return SchemeGroupVersion.String()
}

func (t Sku) GetOwner() object.Type {
	return t.Product
}

func (SkuReference) GetKind() string {
	return "Sku"
}

func (SkuReference) GetPluralizedKind() string {
	return "Skus"
}

func (SkuReference) GetAPIVersion() string {
	return SchemeGroupVersion.String()
}

func (src *Sku) AsSkuReference() *SkuReference {
	dst := pkgruntime.New[SkuReference]()
	pkgruntime.CopyCodableObject(dst, src)

	return dst
}

func (src *SkuReference) AsSku() *Sku {
	dst := pkgruntime.New[Sku]()
	pkgruntime.CopyObject(dst, src)

	return dst
}

func (SkuRequestForCreate) GetKind() string {
	return "Sku"
}

func (SkuRequestForCreate) GetPluralizedKind() string {
	return "Skus"
}

func (SkuRequestForCreate) GetAPIVersion() string {
	return SchemeGroupVersion.String()
}

func (src *Sku) AsSkuRequestForCreate() *SkuRequestForCreate {
	dst := pkgruntime.New[SkuRequestForCreate]()
	pkgruntime.CopyCodableObject(dst, src)
	dst.Spec = src.Spec

	return dst
}

func (src *SkuRequestForCreate) AsSku() *Sku {
	dst := pkgruntime.New[Sku]()
	pkgruntime.Copy(dst, src)
	dst.Spec = src.Spec

	return dst
}

func (SkuRequestForUpdate) GetKind() string {
	return "Sku"
}

func (SkuRequestForUpdate) GetPluralizedKind() string {
	return "Skus"
}

func (SkuRequestForUpdate) GetAPIVersion() string {
	return SchemeGroupVersion.String()
}

func (src *Sku) AsSkuRequestForUpdate() *SkuRequestForUpdate {
	dst := pkgruntime.New[SkuRequestForUpdate]()
	pkgruntime.CopyCodableObject(dst, src)
	dst.Spec = src.Spec

	return dst
}

func (src *SkuRequestForUpdate) AsSku() *Sku {
	dst := pkgruntime.New[Sku]()
	pkgruntime.Copy(dst, src)
	dst.Spec = src.Spec

	return dst
}
