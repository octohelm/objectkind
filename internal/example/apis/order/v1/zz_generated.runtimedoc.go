/*
Package v1 GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package v1

func (v *Order) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Spec":
			return []string{}, true
		case "Status":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(&v.Object, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (*OrderID) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (v *OrderItem) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Spec":
			return []string{}, true
		case "Status":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(&v.Object, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"订单项",
	}, true
}

func (*OrderItemID) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (v *OrderItemRequestForCreate) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Spec":
			return []string{}, true
		}
		if doc, ok := runtimeDoc(&v.Request, "订单项", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"订单项 (更新)",
	}, true
}

func (v *OrderItemSpec) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Sku":
			return []string{
				"商品规格",
			}, true
		case "Quantity":
			return []string{
				"个数",
			}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *OrderItemSpecRequestForCreate) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Sku":
			return []string{
				"商品规格",
			}, true
		case "Quantity":
			return []string{
				"个数",
			}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *OrderItemStatus) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "TotalPrice":
			return []string{
				"总价",
			}, true
		case "DiscountAmount":
			return []string{
				"折扣金额",
			}, true
		case "FinalPrice":
			return []string{
				"最终价格",
			}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *OrderRequestForCreate) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Spec":
			return []string{}, true
		}
		if doc, ok := runtimeDoc(&v.Request, "订单", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"订单 (创建)",
	}, true
}

func (v *OrderSpec) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Items":
			return []string{
				"订单项",
			}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *OrderSpecRequestForCreate) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Items":
			return []string{
				"订单项",
			}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *OrderStatus) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "TotalAmount":
			return []string{
				"总金额",
			}, true
		}

		return nil, false
	}
	return []string{}, true
}

// nolint:deadcode,unused
func runtimeDoc(v any, prefix string, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		doc, ok := c.RuntimeDoc(names...)
		if ok {
			if prefix != "" && len(doc) > 0 {
				doc[0] = prefix + doc[0]
				return doc, true
			}

			return doc, true
		}
	}
	return nil, false
}
