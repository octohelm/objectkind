/*
Package filter GENERATED BY gengo:filterop
DON'T EDIT THIS FILE
*/
package filter

import (
	productv1 "github.com/octohelm/objectkind/internal/example/apis/product/v1"
	product "github.com/octohelm/objectkind/internal/example/domain/product"
	filter "github.com/octohelm/storage/pkg/filter"
	sqlbuilder "github.com/octohelm/storage/pkg/sqlbuilder"
	sqlpipe "github.com/octohelm/storage/pkg/sqlpipe"
	sqlpipefilter "github.com/octohelm/storage/pkg/sqlpipe/filter"
)

type ProductByID struct {
	// 通过 id 筛选
	ID *filter.Filter[productv1.ProductID] `name:"product~id,omitzero" in:"query"`
}

func (f *ProductByID) OperatorType() sqlpipe.OperatorType {
	return sqlpipe.OperatorFilter
}

func (f *ProductByID) Next(src sqlpipe.Source[product.Product]) sqlpipe.Source[product.Product] {
	return src.Pipe(sqlpipefilter.AsWhere(product.ProductT.ID, f.ID))
}

type ProductSortByID struct{}

func (f *ProductSortByID) Name() string {
	return "product~id"
}

func (f *ProductSortByID) Label() string {
	return "id"
}

func (f *ProductSortByID) Sort(src sqlpipe.Source[product.Product], sortBy func(col sqlbuilder.Column) sqlpipe.SourceOperator[product.Product]) sqlpipe.Source[product.Product] {
	return src.Pipe(sortBy(product.ProductT.ID))
}

type ProductByState struct {
	State *filter.Filter[productv1.ProductState] `name:"product~state,omitzero" in:"query"`
}

func (f *ProductByState) OperatorType() sqlpipe.OperatorType {
	return sqlpipe.OperatorFilter
}

func (f *ProductByState) Next(src sqlpipe.Source[product.Product]) sqlpipe.Source[product.Product] {
	return src.Pipe(sqlpipefilter.AsWhere(product.ProductT.State, f.State))
}

type SkuByID struct {
	// 通过 id 筛选
	ID *filter.Filter[productv1.SkuID] `name:"product-sku~id,omitzero" in:"query"`
}

func (f *SkuByID) OperatorType() sqlpipe.OperatorType {
	return sqlpipe.OperatorFilter
}

func (f *SkuByID) Next(src sqlpipe.Source[product.Sku]) sqlpipe.Source[product.Sku] {
	return src.Pipe(sqlpipefilter.AsWhere(product.SkuT.ID, f.ID))
}

type SkuSortByID struct{}

func (f *SkuSortByID) Name() string {
	return "product-sku~id"
}

func (f *SkuSortByID) Label() string {
	return "id"
}

func (f *SkuSortByID) Sort(src sqlpipe.Source[product.Sku], sortBy func(col sqlbuilder.Column) sqlpipe.SourceOperator[product.Sku]) sqlpipe.Source[product.Sku] {
	return src.Pipe(sortBy(product.SkuT.ID))
}

type SkuByCode struct {
	// 通过 编码 筛选
	Code *filter.Filter[productv1.SkuCode] `name:"product-sku~code,omitzero" in:"query"`
}

func (f *SkuByCode) OperatorType() sqlpipe.OperatorType {
	return sqlpipe.OperatorFilter
}

func (f *SkuByCode) Next(src sqlpipe.Source[product.Sku]) sqlpipe.Source[product.Sku] {
	return src.Pipe(sqlpipefilter.AsWhere(product.SkuT.Code, f.Code))
}

type SkuByProductID struct {
	// 通过 所属产品 筛选
	ProductID *filter.Filter[productv1.ProductID] `name:"product-sku~productID,omitzero" in:"query"`
}

func (f *SkuByProductID) OperatorType() sqlpipe.OperatorType {
	return sqlpipe.OperatorFilter
}

func (f *SkuByProductID) Next(src sqlpipe.Source[product.Sku]) sqlpipe.Source[product.Sku] {
	return src.Pipe(sqlpipefilter.AsWhere(product.SkuT.ProductID, f.ProductID))
}
