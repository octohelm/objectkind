/*
Package product GENERATED BY gengo:table
DON'T EDIT THIS FILE
*/
package product

import (
	productv1 "github.com/octohelm/objectkind/internal/example/apis/product/v1"
	transactionv1 "github.com/octohelm/objectkind/internal/example/apis/transaction/v1"
	annotate "github.com/octohelm/objectkind/pkg/annotate"
	sqlbuilder "github.com/octohelm/storage/pkg/sqlbuilder"
	modelscoped "github.com/octohelm/storage/pkg/sqlbuilder/modelscoped"
	sqltypejson "github.com/octohelm/storage/pkg/sqltype/json"
	nullable "github.com/octohelm/storage/pkg/sqltype/nullable"
	sqltypetime "github.com/octohelm/storage/pkg/sqltype/time"
)

func (Product) TableName() string {
	return "t_product"
}

func (Product) GetKind() string {
	return "Product"
}

func (Product) PrimaryKey() []string {
	return []string{
		"ID",
	}
}

func (Product) Indexes() sqlbuilder.Indexes {
	return sqlbuilder.Indexes{
		"i_state": []string{
			"State",
		},
	}
}

func init() {
	T.Add(ProductT)
}

func (tableProduct) New() sqlbuilder.Model {
	return &Product{}
}

type tableProduct struct {
	modelscoped.Table[Product]

	I indexesOfProduct

	// id
	ID modelscoped.TypedColumn[Product, productv1.ProductID]
	// 名称
	Name modelscoped.TypedColumn[Product, string]
	// 描述
	Description modelscoped.TypedColumn[Product, nullable.Text]
	// 创建时间
	CreatedAt modelscoped.TypedColumn[Product, sqltypetime.Timestamp]
	// 更新时间
	UpdatedAt modelscoped.TypedColumn[Product, sqltypetime.Timestamp]

	State modelscoped.TypedColumn[Product, productv1.ProductState]
}

type indexesOfProduct struct {
	Primary modelscoped.Key[Product]
}

var ProductT = &tableProduct{
	Table: modelscoped.FromModel[Product](),

	ID:          modelscoped.CastTypedColumn[Product, productv1.ProductID](modelscoped.FromModel[Product]().F("ID")),
	Name:        modelscoped.CastTypedColumn[Product, string](modelscoped.FromModel[Product]().F("Name")),
	Description: modelscoped.CastTypedColumn[Product, nullable.Text](modelscoped.FromModel[Product]().F("Description")),
	CreatedAt:   modelscoped.CastTypedColumn[Product, sqltypetime.Timestamp](modelscoped.FromModel[Product]().F("CreatedAt")),
	UpdatedAt:   modelscoped.CastTypedColumn[Product, sqltypetime.Timestamp](modelscoped.FromModel[Product]().F("UpdatedAt")),
	State:       modelscoped.CastTypedColumn[Product, productv1.ProductState](modelscoped.FromModel[Product]().F("State")),

	I: indexesOfProduct{
		Primary: modelscoped.FromModel[Product]().MK("primary"),
	},
}

func (Sku) TableName() string {
	return "t_product_sku"
}

func (Sku) GetKind() string {
	return "Sku"
}

func (Sku) PrimaryKey() []string {
	return []string{
		"ID",
	}
}

func (Sku) UniqueIndexes() sqlbuilder.Indexes {
	return sqlbuilder.Indexes{
		"i_sku": []string{
			"ProductID",
			"Code",
		},
	}
}

func init() {
	T.Add(SkuT)
}

func (tableSku) New() sqlbuilder.Model {
	return &Sku{}
}

type tableSku struct {
	modelscoped.Table[Sku]

	I indexesOfSku

	// id
	ID modelscoped.TypedColumn[Sku, productv1.SkuID]
	// 名称
	Name modelscoped.TypedColumn[Sku, string]
	// 描述
	Description modelscoped.TypedColumn[Sku, nullable.Text]
	// 创建时间
	CreatedAt modelscoped.TypedColumn[Sku, sqltypetime.Timestamp]
	// 更新时间
	UpdatedAt modelscoped.TypedColumn[Sku, sqltypetime.Timestamp]
	// 编码
	Code modelscoped.TypedColumn[Sku, productv1.SkuCode]
	// 所属产品
	ProductID modelscoped.TypedColumn[Sku, productv1.ProductID]
	// 单价
	Price modelscoped.TypedColumn[Sku, int64]
	// 货币单位
	Currency modelscoped.TypedColumn[Sku, transactionv1.Currency]
	// 其他属性
	Annotations modelscoped.TypedColumn[Sku, sqltypejson.Value[annotate.Annotations]]
}

type indexesOfSku struct {
	Primary modelscoped.Key[Sku]
	ISku    modelscoped.Key[Sku]
}

var SkuT = &tableSku{
	Table: modelscoped.FromModel[Sku](),

	ID:          modelscoped.CastTypedColumn[Sku, productv1.SkuID](modelscoped.FromModel[Sku]().F("ID")),
	Name:        modelscoped.CastTypedColumn[Sku, string](modelscoped.FromModel[Sku]().F("Name")),
	Description: modelscoped.CastTypedColumn[Sku, nullable.Text](modelscoped.FromModel[Sku]().F("Description")),
	CreatedAt:   modelscoped.CastTypedColumn[Sku, sqltypetime.Timestamp](modelscoped.FromModel[Sku]().F("CreatedAt")),
	UpdatedAt:   modelscoped.CastTypedColumn[Sku, sqltypetime.Timestamp](modelscoped.FromModel[Sku]().F("UpdatedAt")),
	Code:        modelscoped.CastTypedColumn[Sku, productv1.SkuCode](modelscoped.FromModel[Sku]().F("Code")),
	ProductID:   modelscoped.CastTypedColumn[Sku, productv1.ProductID](modelscoped.FromModel[Sku]().F("ProductID")),
	Price:       modelscoped.CastTypedColumn[Sku, int64](modelscoped.FromModel[Sku]().F("Price")),
	Currency:    modelscoped.CastTypedColumn[Sku, transactionv1.Currency](modelscoped.FromModel[Sku]().F("Currency")),
	Annotations: modelscoped.CastTypedColumn[Sku, sqltypejson.Value[annotate.Annotations]](modelscoped.FromModel[Sku]().F("Annotations")),

	I: indexesOfSku{
		Primary: modelscoped.FromModel[Sku]().MK("primary"),
		ISku:    modelscoped.FromModel[Sku]().MK("i_sku"),
	},
}
